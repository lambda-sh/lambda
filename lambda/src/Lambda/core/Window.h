/// @file Window.h
/// @brief The Abstract Window definition.
#ifndef LAMBDA_SRC_LAMBDA_CORE_WINDOW_H_
#define LAMBDA_SRC_LAMBDA_CORE_WINDOW_H_

#include <string>

#include <Lambda/core/events/Event.h>
#include <Lambda/core/memory/Pointers.h>

namespace lambda::core {

/// @brief Generic Window properties used to create platform specific windows.
struct WindowProperties {
  std::string Title;
  unsigned int Width;
  unsigned int Height;

  explicit WindowProperties(
    std::string title = "Game Engine",
    const unsigned int width = 1280,
    const unsigned int height = 720)
        : Title(std::move(title)), Width(width), Height(height) {}
};

/// @brief The generic window implementation that allows platform specific
/// window APIs to expose generic window functionality without users having to
/// know the window system.
class Window {
 public:
  /// @brief The function to be used for handling events generated by user
  /// input in the window.
  typedef std::function<void(memory::Shared<events::Event>)>
      EventCallbackFunction;
  virtual ~Window() = default;

  /// @brief Handles what the window should do when the engine updates.
  virtual void OnUpdate() = 0;

  /// @brief Get the width of the window.
  [[nodiscard]] virtual unsigned int GetWidth() const = 0;

  /// @brief Get the height of the window.
  [[nodiscard]] virtual unsigned int GetHeight() const = 0;

  /// @brief Set the callback for the window when an event is generated.
  virtual void SetEventCallback(const EventCallbackFunction& callback) = 0;

  /// @brief Set the vertical sync on the window.
  virtual void SetVerticalSync(bool enabled) = 0;

  /// @brief Checks if the window has vertical sync enabled.
  [[nodiscard]] virtual bool HasVerticalSync() const = 0;

  /// @brief Get the native window implementation. Needs to be casted into it's
  /// real type.
  [[nodiscard]] virtual void* GetNativeWindow() const = 0;

  /// @brief Create a platform specific window. (Needs to be specified with
  /// compiler flags.)
  static memory::Shared<Window> Create(
      WindowProperties properties = WindowProperties());
};

}  // namespace lambda::core

#endif  // LAMBDA_SRC_LAMBDA_CORE_WINDOW_H_
