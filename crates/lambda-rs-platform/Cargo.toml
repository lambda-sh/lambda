[package]
name = "lambda-rs-platform"
description = "Platform implementations for lambda-rs"
version = "2023.1.30"
edition = "2021"
resolver = "2"
license = "MIT"

[lib]
name = "lambda_platform"
path = "src/lib.rs"

[dependencies]
winit = "=0.29.10"
shaderc = { version = "=0.7", optional = true, default-features = false }
naga = { version = "=23.1.0", optional = true, default-features = false, features = ["spv-out", "glsl-in", "wgsl-in"] }
rand = "=0.8.5"
obj-rs = "=0.7.0"
wgpu = { version = "=23.0.1", optional = true, features = ["wgsl", "spirv"] }
pollster = { version = "=0.3.0", optional = true }
lambda-rs-logging = { path = "../lambda-rs-logging", version = "2023.1.30" }

[dev-dependencies]
mockall = "=0.11.3"

[features]
default=["wgpu", "shader-backend-naga"]

shader-backend-naga=["dep:naga"]
shader-backend-shaderc=["dep:shaderc"]
shader-backend-shaderc-build-from-source=["shader-backend-shaderc", "shaderc/build-from-source"]

wgpu=["dep:wgpu", "dep:pollster", "wgpu/wgsl", "wgpu/spirv", "shader-backend-naga"]
wgpu-with-vulkan=["wgpu"]
wgpu-with-metal=["wgpu", "wgpu/metal"]
wgpu-with-dx12=["wgpu", "wgpu/dx12"]
wgpu-with-gl=["wgpu", "wgpu/webgl"]

[profile.dev]
crate-type = ["cdylib", "rlib"]
incremental = true
