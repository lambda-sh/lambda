/**
 * @file Window.h
 * @brief The Abstract Window definition.
 */
#ifndef ENGINE_SRC_CORE_WINDOW_H_
#define ENGINE_SRC_CORE_WINDOW_H_

#include <string>

#include "core/Core.h"
#include "core/events/Event.h"
#include "core/memory/Pointers.h"

namespace engine {

using events::Event;
using memory::Shared;

struct WindowProperties {
  std::string Title;
  unsigned int Width;
  unsigned int Height;

  WindowProperties(
      const std::string& title = "Game Engine",
      unsigned int width = 1280,
      unsigned int height = 720) :
          Title(title), Width(width), Height(height) {}
};

class Window {
 public:
  typedef std::function<void(Shared<Event>)> EventCallbackFunction;
  virtual ~Window() {}

  virtual void OnUpdate() = 0;

  virtual unsigned int GetWidth() const = 0;
  virtual unsigned int GetHeight() const = 0;

  virtual void SetEventCallback(const EventCallbackFunction& callback) = 0;
  virtual void SetVerticalSync(bool enabled) = 0;
  virtual bool HasVerticalSync() const = 0;
  virtual void* GetNativeWindow() const = 0;

  static memory::Shared<Window> Create(
      const WindowProperties& properties = WindowProperties());
};

}  // namespace engine

#endif  // ENGINE_SRC_CORE_WINDOW_H_

/**
 * @struct engine::WindowProperties
 * @brief Generic Window properties used to create platform specific windows.
 */

/**
 * @class engine::Window
 * @brief The generic window implementation that allows platform specific window
 * APIs to expose generic window functionality without users having to know the
 * window system.
 */

/**
 * @typedef engine::Window::EventCallbackFunction
 * @brief The function to be used for handling events generated by user input
 * in the window.
 */

/**
 * @fn engine::Window::OnUpdate
 * @brief Handles what the window should do when the engine updates.
 */

/**
 * @fn engine::Window::GetWidth
 * @brief Get the width of the window.
 */

/**
 * @fn engine::Window::GetHeight
 * @brief Get the height of the window.
 */

/**
 * @fn engine::Window::SetEventCallback
 * @brief Set the callback for the window when an event is generated.
 */

/**
 * @fn engine::Window::SetVerticalSync
 * @brief Set the vertical sync on the window.
 */

/**
 * @fn engine::Window::HasVerticalSync
 * @brief Checks if the window has vertical sync enabled.
 */

/**
 * @fn engine::Window::GetNativeWindow
 * @brief Get the native window implementation. Needs to be casted into it's
 * real type.
 */


/**
 * @fn engine::Window::Create
 * @brief Create a platform specific window. (Needs to be specified with
 * compiler flags.)
 */
